# -*- coding: utf-8 -*-
"""• Python Data Type: String - 20 zadań.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Zk7oW3vbG1x7K5PwvzAEA0fSF5J-rCwe
"""

# Zadanie 1 - Write a Python program to remove the nth index character from a nonempty string.
def usun_znak(string, n):
    if n < 0 or n >= len(string):
        return "Indeks poza zakresem"
    else:
        return string[:n] + string[n+1:]

tekst = "Przykład"
n = 2
wynik = usun_znak(tekst, n)
print("Wynik:", wynik)

# Zadanie 2 - Write a Python function that takes a list of words and return the longest word and the length of the longest one.
def znajdz_najdluzsze_slowo(slowa):
    if not slowa:
        return None, 0

    najdluzsze_slowo = ''
    najdluzsza_dlugosc = 0
    for slowo in slowa:
        if len(slowo) > najdluzsza_dlugosc:
            najdluzsze_slowo = slowo
            najdluzsza_dlugosc = len(slowo)

    return najdluzsze_slowo, najdluzsza_dlugosc

lista_slow = ["jabłko", "banan", "pomarańcza", "kiwi", "ananas"]
najdluzsze_slowo, dlugosc = znajdz_najdluzsze_slowo(lista_slow)
print("Najdłuższe słowo:", najdluzsze_slowo)
print("Długość najdłuższego słowa:", dlugosc)

# Zadnanie 3 - Write a Python program to count the occurrences of each word in a given sentence
def zlicz_slowa(zdanie):
    # Podziel zdanie na słowa
    slowa = zdanie.split()

    # Zainicjuj pusty słownik, aby przechowywać liczbę słów
    licznik_slow = {}

    # Iteruj po każdym słowie na liście słów
    for slowo in slowa:
        # Sprawdź, czy dane słowo jest już w słowniku
        if slowo in licznik_slow:
            # Jeśli tak, zwiększ jego licznik o 1
            licznik_slow[slowo] += 1
        else:
            # Jeśli nie, dodaj go do słownika z liczbą 1
            licznik_slow[slowo] = 1

    return licznik_slow

zdanie = "To jest zdanie testowe, które pozwala policzyć wystąpienia każdego słowa w tym zdaniu."
licznik_slow = zlicz_slowa(zdanie)
print("Ilość wyrazów:")
for slowo, liczba in licznik_slow.items():
    print(f"'{slowo}': {liczba}")

# Zadanie 4 - Write a Python script that takes input from the user and displays that input back in upper and lower cases
def main():
    wejscie_uzytkownika = input("Podaj ciąg znaków: ")

    duze_litery = wejscie_uzytkownika.upper()

    male_litery = wejscie_uzytkownika.lower()

    print("Wpisz wielkimi literami:", duze_litery)
    print("Wpisz małymi literami:", male_litery)

if __name__ == "__main__":
    main()

# Zadanie 5 - Write a Python program to calculate the length of a string
def oblicz_dlugosc_tekstu(tekst):
    dlugosc = len(tekst)
    return dlugosc

tekst_wejsciowy = input("Wprowadź tekst: ")
dlugosc = oblicz_dlugosc_tekstu(tekst_wejsciowy)
print("Długość tekstu:", dlugosc)

# Zadanie 6 - Write a Python program to get a string from a given string where all occurrences of its first char have been changed to '$', except the first char itself
def zamien_pierwszy_znak_na_dolary(tekst):
    if len(tekst) < 2:
        return tekst  # Zwróć tekst niezmieniony, jeśli ma długość mniejszą niż 2

    pierwszy_znak = tekst[0]
    zmodyfikowany_tekst = pierwszy_znak  # Zacznij od pierwszego znaku

    # Przeiteruj przez tekst, zaczynając od drugiego znaku
    for znak in tekst[1:]:
        if znak == pierwszy_znak:
            # Zamień wystąpienie pierwszego znaku na '$'
            zmodyfikowany_tekst += '$'
        else:
            zmodyfikowany_tekst += znak

    return zmodyfikowany_tekst

# Przetestuj funkcję
tekst = 'restart'
wynik = zamien_pierwszy_znak_na_dolary(tekst)
print("Oryginalny Tekst:", tekst)
print("Wynikowy Tekst:", wynik)

# Zadanie 7 - Write a Python program to get a single string from two given strings, separated by a space and swap the first two characters of each string.
def zamien_i_polacz(str1, str2):
    # Zamień pierwsze dwa znaki każdego ciągu znaków
    nowy_str1 = str2[:2] + str1[2:]
    nowy_str2 = str1[:2] + str2[2:]

    # Połącz zamienione ciągi znaków spacją
    wynik = nowy_str1 + ' ' + nowy_str2
    return wynik

# Przetestuj funkcję
ciag1 = 'abc'
ciag2 = 'xyz'
wynik = zamien_i_polacz(ciag1, ciag2)
print("Oczekiwany wynik:", wynik)

# Zadanie 8 - Write a Python program to add 'ing' at the end of a given string (length should be at least 3). If the given string already ends with 'ing', add 'ly' instead. If the string length of the given string is less than 3, leave it unchanged.
def zmodyfikuj_ciag(tekst):
    if len(tekst) < 3:
        return tekst
    elif tekst[-3:] == 'ing':
        return tekst + 'ly'
    else:
        return tekst + 'ing'

# Przetestuj funkcję
ciagi_testowe = ["grać", "gra", "pływać", "spacer"]
for ciag in ciagi_testowe:
    wynik = zmodyfikuj_ciag(ciag)
    print(f"Wejście: {ciag}, Wynik: {wynik}")

# Zadanie 9 - Write a Python program to find the first appearance of the substrings 'not' and 'poor' in a given string. If 'not' follows 'poor', replace the whole 'not'...'poor' substring with 'good'. Return the resulting string.
def replace_substring(text):
    index_not = text.find('not')
    index_poor = text.find('poor')

    # Sprawdź, czy oba słowa występują w tekście
    if index_not != -1 and index_poor != -1:
        # Sprawdź, czy 'not' występuje przed 'poor'
        if index_not < index_poor:
            text = text[:index_not] + 'good' + text[index_poor + 4:]

    return text
# Przetestuj funkcję
text1 = 'The lyrics is not that poor!'
text2 = 'The lyrics is poor!'
result1 = replace_substring(text1)
result2 = replace_substring(text2)
print("Oczekiwany wynik 1:", result1)
print("Oczekiwany wynik 2:", result2)

# Zadanie 10 -  Write a Python program to remove characters that have odd index values in a given string.
def usun_znaki_o_nieparzystym_indeksie(tekst_wejsciowy):
    # Wykorzystaj wycinanie ciągów znaków, aby usunąć znaki o nieparzystych indeksach
    wynik = tekst_wejsciowy[::2]
    return wynik

# Przetestuj funkcję
tekst_wejsciowy = "Witaj świecie!"
wynik = usun_znaki_o_nieparzystym_indeksie(tekst_wejsciowy)
print("Wynik:", wynik)

# Zadanie 11 - Write a Python program that accepts a comma-separated sequence of words as input and prints the distinct words in sorted form (alphanumerically).
def drukuj_posortowane_distinct_slowa(ciag):
    # Podziel ciąg na słowa używając przecinka jako separatora
    slowa = ciag.split(',')

    # Usuń początkowe i końcowe białe znaki z każdego słowa i zamień je na małe litery
    slowa = [slowo.strip().lower() for slowo in slowa]

    # Usuń duplikaty, zamieniając listę na zbiór, a następnie ponownie na listę
    unikalne_slowa = list(set(slowa))

    # Posortuj unikalne słowa alfabetycznie
    unikalne_slowa.sort()

    # Wydrukuj posortowane unikalne słowa
    print("Unikalne słowa w posortowanej formie:", ", ".join(unikalne_slowa))

# Przetestuj funkcję
ciag_wejsciowy = input("Podaj ciąg słów oddzielonych przecinkami: ")
drukuj_posortowane_distinct_slowa(ciag_wejsciowy)

# Zadanie 12 - Write a Python function to get a string made of 4 copies of the last two characters of a specified string (length must be at least 2).
def insert_end(string):
    if len(string) < 2:
        return "Długość ciągu musi być co najmniej 2"
    else:
        last_two_chars = string[-2:]
        return last_two_chars * 4

# Przetestuj funkcję
print("Wynik dla 'Szczur':", insert_end('Szczur'))
print("Wynik dla 'Ptak':", insert_end('Ptak'))

# Zadanie 13 - Write a Python function to reverse a string if its length is a multiple of 4.
def odwróć_ciąg_jeśli_wielokrotność_4(tekst):
    if len(tekst) % 4 == 0:
        return tekst[::-1]
    else:
        return tekst

# Testuj funkcję
testowy_ciąg_1 = "abcd"
testowy_ciąg_2 = "python"
testowy_ciąg_3 = "abcdefgh"
print("Oryginalny ciąg:", testowy_ciąg_1)
print("Odwrócony ciąg (jeśli długość jest wielokrotnością 4):", odwróć_ciąg_jeśli_wielokrotność_4(testowy_ciąg_1))
print("Oryginalny ciąg:", testowy_ciąg_2)
print("Odwrócony ciąg (jeśli długość jest wielokrotnością 4):", odwróć_ciąg_jeśli_wielokrotność_4(testowy_ciąg_2))
print("Oryginalny ciąg:", testowy_ciąg_3)
print("Odwrócony ciąg (jeśli długość jest wielokrotnością 4):", odwróć_ciąg_jeśli_wielokrotność_4(testowy_ciąg_3))

# Zadanie 14 - Write a Python function to convert a given string to all uppercase if it contains at least 2 uppercase characters in the first 4 characters.
def konwertuj_do_wielkich_liter(tekst):
    if sum(1 for znak in tekst[:4] if znak.isupper()) >= 2:
        return tekst.upper()
    else:
        return tekst

# Testuj funkcję
testowy_ciąg_1 = "AbcDE"
testowy_ciąg_2 = "aBcDE"
testowy_ciąg_3 = "aBCde"
print("Oryginalny ciąg:", testowy_ciąg_1)
print("Skonwertowany ciąg:", konwertuj_do_wielkich_liter(testowy_ciąg_1))
print("Oryginalny ciąg:", testowy_ciąg_2)
print("Skonwertowany ciąg:", konwertuj_do_wielkich_liter(testowy_ciąg_2))
print("Oryginalny ciąg:", testowy_ciąg_3)
print("Skonwertowany ciąg:", konwertuj_do_wielkich_liter(testowy_ciąg_3))

# Zadanie 15 - Write a Python program to sort a string lexicographically.
def posortuj_leksykograficznie(tekst):
    # Przekształć ciąg znaków w listę znaków
    znaki = list(tekst)

    # Posortuj znaki leksykograficznie
    posortowane_znaki = sorted(znaki)

    # Połącz posortowane znaki, aby utworzyć posortowany ciąg znaków
    posortowany_tekst = ''.join(posortowane_znaki)

    return posortowany_tekst

# Przetestuj funkcję
ciag_wejsciowy = input("Podaj ciąg znaków: ")
posortowany_tekst = posortuj_leksykograficznie(ciag_wejsciowy)
print("Posortowany leksykograficznie ciąg znaków:", posortowany_tekst)

# Zadanie 16 - Write a Python program to remove a newline in Python.
def usun_nowa_linie(ciag_wejsciowy):
    return ciag_wejsciowy.replace('\n', '')

# Przetestuj funkcję
ciag_wejsciowy = "Cześć,\nŚwiecie!\nJak się masz?\n"
wynik = usun_nowa_linie(ciag_wejsciowy)
print("Oryginalny ciąg:")
print(ciag_wejsciowy)
print("Ciąg po usunięciu nowych linii:")
print(wynik)

# Zadanie 17 - Write a Python program to check whether a string starts with specified characters.
def zaczyna_się_od(tekst, prefiks):
    return tekst.startswith(prefiks)

# Testuj funkcję
ciąg_wejściowy = input("Podaj ciąg znaków: ")
określone_znaki = input("Podaj określone znaki: ")
if zaczyna_się_od(ciąg_wejściowy, określone_znaki):
    print(f"Ciąg '{ciąg_wejściowy}' zaczyna się od '{określone_znaki}'.")
else:
    print(f"Ciąg '{ciąg_wejściowy}' nie zaczyna się od '{określone_znaki}'.")

# Zadanie 18 - Write a Python program to remove existing indentation from all of the lines in a given text.
def usun_wcięcia(tekst):
    # Podziel tekst na linie
    linie = tekst.split('\n')

    # Usuń istniejące wcięcia z każdej linii
    linie = [linia.lstrip() for linia in linie]

    # Połącz ponownie linie
    wynik = '\n'.join(linie)

    return wynik

# Przetestuj funkcję
tekst_wejściowy = """    Cześć,
    Świecie!
        Jak się masz?"""
print("Oryginalny tekst:")
print(tekst_wejściowy)
print("\nTekst po usunięciu wcięć:")
print(usun_wcięcia(tekst_wejściowy))

# Zadanie 19 - Write a Python program to set the indentation of the first line.
def ustaw_wcięcie_pierwszej_linii(tekst, wcięcie):
    # Podziel tekst na linie
    linie = tekst.split('\n')

    # Ustaw wcięcie pierwszej linii
    if linie:
        linie[0] = wcięcie + linie[0].lstrip()

    # Połącz ponownie linie
    wynik = '\n'.join(linie)

    return wynik

# Przetestuj funkcję
tekst_wejściowy = """Cześć,
Świecie!
Jak się masz?"""
wcięcie = "    "
print("Oryginalny tekst:")
print(tekst_wejściowy)
print("\nTekst z ustawionym wcięciem dla pierwszej linii:")
print(ustaw_wcięcie_pierwszej_linii(tekst_wejściowy, wcięcie))

# Zadanie 20 - Write a Python program to print the following numbers up to 2 decimal places.
def drukuj_liczby(lista_liczb):
    for liczba in lista_liczb:
        print("{:.2f}".format(liczba))

# Testuj funkcję
liczby = [3.1415926, 1.61803398875, 2.71828, 0.5772156649]
print("Liczby do 2 miejsc po przecinku:")
drukuj_liczby(liczby)