# -*- coding: utf-8 -*-
"""Python Conditional Statements and loops - 20 zadań.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kZBTyYIBxt3i_RFkEnQ5ts35eo6LlNU3
"""

# Zadanie 60 - Write a Python program to find those numbers which are divisible by 7 and multiples of 5, between 1500 and 2700 (both included).
# Pusta lista do przechowywania liczb spełniających warunek
wynik = []

# Sprawdzenie każdej liczby w zakresie
for liczba in range(1500, 2701):
    # Sprawdzenie warunków podzielności przez 7 i wielokrotności 5
    if liczba % 7 == 0 and liczba % 5 == 0:
        wynik.append(liczba)

# Wyświetlenie liczb spełniających warunek
print("Liczby podzielne przez 7 i wielokrotnością 5, od 1500 do 2700:")
print(wynik)

# Zadanie 61 - Write a Python program to guess a number between 1 and 9.
import random

# Losowanie liczby między 1 a 9
wylosowana_liczba = random.randint(1, 9)

# Pętla zgadywania liczby
while True:
    # Pobranie od użytkownika zgadywanej liczby
    zgadnieta_liczba = int(input("Zgadnij liczbę między 1 a 9: "))

    # Sprawdzenie czy zgadnięto poprawną liczbę
    if zgadnieta_liczba == wylosowana_liczba:
        print("Gratulacje! Zgadłeś liczbę!")
        break
    else:
        print("Nieprawidłowa liczba. Spróbuj ponownie.")

# Zadanie 62 - Write a Python program to construct the following pattern, using a nested for loop.
# Wysokość wzoru
wysokość = 5

# Górna część wzoru
for i in range(wysokość):
    print('* ' * (i + 1))

# Dolna część wzoru
for i in range(wysokość - 1, 0, -1):
    print('* ' * i)

# Zadanie 63 - Write a Python program that accepts a word from the user and reverses it.
# Pobranie słowa od użytkownika
słowo = input("Wprowadź słowo: ")

# Odwrócenie słowa
odwrócone_słowo = słowo[::-1]

# Wyświetlenie odwróconego słowa
print("Odwrócone słowo:", odwrócone_słowo)

# Zadanie 64 - Write a Python program that prints all the numbers from 0 to 6 except 3 and 6.
# Drukowanie liczb od 0 do 6 z pominięciem 3 i 6
for liczba in range(7):
    if liczba == 3 or liczba == 6:
        continue
    print(liczba)

# Zadanie 65 - Write a Python program that iterates the integers from 1 to 50. For multiples of three print "Fizz" instead of the number and for multiples of five print "Buzz". For numbers that are multiples of three and five, print "FizzBuzz".
# Iteracja po liczbach od 1 do 50
for liczba in range(1, 51):
    # Sprawdzenie warunków i wydrukowanie odpowiedniego wyrazu
    if liczba % 3 == 0 and liczba % 5 == 0:
        print("FizzBuzz")
    elif liczba % 3 == 0:
        print("Fizz")
    elif liczba % 5 == 0:
        print("Buzz")
    else:
        print(liczba)

# Zadanie 66 - Write a Python program that accepts a sequence of lines (blank line to terminate) as input and prints the lines as output (all characters in lower case).
# Inicjalizacja pustej listy do przechowywania linii
lines = []

# Pętla pobierania linii od użytkownika
print("Wprowadź linie (pusta linia, aby zakończyć):")
while True:
    linia = input()
    # Sprawdzenie czy linia jest pusta
    if not linia:
        break
    lines.append(linia)

# Wydrukowanie linii w formie małych liter
print("Linie w formie małych liter:")
for linia in lines:
    print(linia.lower())

def print_A():
    print("  ***  ")
    print(" *   * ")
    print(" *   * ")
    print(" ***** ")
    print(" *   * ")
    print(" *   * ")
    print(" *   * ")

print_A()

# Zadanie 68 - Write a Python program to calculate a dog's age in dog years.
def oblicz_wiek_psa(lata_człowieka):
    if lata_człowieka <= 2:
        lata_psie = lata_człowieka * 10.5
    else:
        lata_psie = 2 * 10.5 + (lata_człowieka - 2) * 4
    return lata_psie

# Wejście: wiek psa w latach człowieka
wiek_człowieka = int(input("Podaj wiek psa w latach człowieka: "))

# Obliczanie wieku psa w psich latach
wiek_psa = oblicz_wiek_psa(wiek_człowieka)

# Wyświetlenie wieku psa w psich latach
print("Wiek psa w psich latach to:", wiek_psa)

# Zadanie 69 - Write a Python program to sum two integers. However, if the sum is between 15 and 20 it will return 20.
def suma_dwoch_liczb(a, b):
    suma = a + b
    if 15 <= suma <= 20:
        return 20
    else:
        return suma

# Testowanie funkcji
liczba1 = int(input("Podaj pierwszą liczbę całkowitą: "))
liczba2 = int(input("Podaj drugą liczbę całkowitą: "))
wynik = suma_dwoch_liczb(liczba1, liczba2)
print("Suma:", wynik)

# Zadanie 70 - Write a Python program to display the astrological sign for a given date of birth.
def znak_astrologiczny(dzień, miesiąc):
    if (miesiąc == 1 and dzień >= 20) or (miesiąc == 2 and dzień <= 18):
        return "Wodnik"
    elif (miesiąc == 2 and dzień >= 19) or (miesiąc == 3 and dzień <= 20):
        return "Ryby"
    elif (miesiąc == 3 and dzień >= 21) or (miesiąc == 4 and dzień <= 19):
        return "Baran"
    elif (miesiąc == 4 and dzień >= 20) or (miesiąc == 5 and dzień <= 20):
        return "Byk"
    elif (miesiąc == 5 and dzień >= 21) or (miesiąc == 6 and dzień <= 20):
        return "Bliźnięta"
    elif (miesiąc == 6 and dzień >= 21) or (miesiąc == 7 and dzień <= 22):
        return "Rak"
    elif (miesiąc == 7 and dzień >= 23) or (miesiąc == 8 and dzień <= 22):
        return "Lew"
    elif (miesiąc == 8 and dzień >= 23) or (miesiąc == 9 and dzień <= 22):
        return "Panna"
    elif (miesiąc == 9 and dzień >= 23) or (miesiąc == 10 and dzień <= 22):
        return "Waga"
    elif (miesiąc == 10 and dzień >= 23) or (miesiąc == 11 and dzień <= 21):
        return "Skorpion"
    elif (miesiąc == 11 and dzień >= 22) or (miesiąc == 12 and dzień <= 21):
        return "Strzelec"
    else:
        return "Koziorożec"

# Wejście: Data urodzenia
dzień = int(input("Podaj dzień urodzenia (1-31): "))
miesiąc = int(input("Podaj miesiąc urodzenia (1-12): "))

# Wyświetlenie znaku astrologicznego
znak = znak_astrologiczny(dzień, miesiąc)
print("Twój znak astrologiczny to:", znak)

# Zadanie 71 - Write a Python program to display the sign of the Chinese Zodiac for the given year in which you were born.
def zodiak_chiński(rok):
    znaki_zodiaku = ['Małpa', 'Kogut', 'Pies', 'Świnia', 'Szczur', 'Byk', 'Tygrys', 'Królik', 'Smok', 'Wąż', 'Koń', 'Owca']
    rok_początkowy = 1900
    indeks_znaku = (rok - rok_początkowy) % 12
    return znaki_zodiaku[indeks_znaku]

# Wejście: Rok urodzenia
rok = int(input("Podaj rok urodzenia: "))

# Wyświetlenie znaku chińskiego zodiaku
znak = zodiak_chiński(rok)
print("Twój znak chińskiego zodiaku to:", znak)

# Zadanie 72 - Write a Python program to find the median of three values.
def median_of_three(a, b, c):
    # Sprawdzenie, czy a jest medianą
    if (b <= a <= c) or (c <= a <= b):
        return a
    # Sprawdzenie, czy b jest medianą
    elif (a <= b <= c) or (c <= b <= a):
        return b
    # W przeciwnym razie c jest medianą
    else:
        return c

# Testowanie funkcji
num1 = float(input("Podaj pierwszą liczbę: "))
num2 = float(input("Podaj drugą liczbę: "))
num3 = float(input("Podaj trzecią liczbę: "))

# Obliczanie mediany
median = median_of_three(num1, num2, num3)
print("Mediana:", median)

# Zadanie 73 - Write a Python program to get the next day of a given date.
def next_day(year, month, day):
    # Sprawdzenie, czy rok jest przestępny
    if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):
        leap_year = True
    else:
        leap_year = False

    # Definicja liczby dni w każdym miesiącu
    days_in_month = {
        1: 31,  # Styczeń
        2: 29 if leap_year else 28,  # Luty
        3: 31,  # Marzec
        4: 30,  # Kwiecień
        5: 31,  # Maj
        6: 30,  # Czerwiec
        7: 31,  # Lipiec
        8: 31,  # Sierpień
        9: 30,  # Wrzesień
        10: 31,  # Październik
        11: 30,  # Listopad
        12: 31  # Grudzień
    }

    # Sprawdzenie, czy podana data jest prawidłowa
    if day < 1 or day > days_in_month[month]:
        return "Podana data jest nieprawidłowa."

    # Obliczenie następnego dnia
    if day < days_in_month[month]:
        next_day = day + 1
        next_month = month
    else:
        next_day = 1
        if month < 12:
            next_month = month + 1
        else:
            next_month = 1
            year += 1

    return year, next_month, next_day

# Wejście: Data
year = int(input("Podaj rok: "))
month = int(input("Podaj miesiąc (1-12): "))
day = int(input("Podaj dzień (1-31): "))

# Obliczenie następnego dnia
next_date = next_day(year, month, day)
print("Następny dzień:", next_date)

# Zadanie 74 - Write a Python program to calculate the sum and average of n integer numbers (input from the user). Input 0 to finish.
# Pobieranie liczb od użytkownika
numbers = []
while True:
    num = int(input("Podaj liczbę (0 aby zakończyć): "))
    if num == 0:
        break
    numbers.append(num)

# Obliczanie sumy
total = sum(numbers)

# Obliczanie średniej
if numbers:
    average = total / len(numbers)
else:
    average = 0

# Wyświetlanie wyników
print("Suma liczb:", total)
print("Średnia liczb:", average)

# Zadanie 75 - Write a Python program to create the multiplication table (from 1 to 10) of a number.
def multiplication_table(number):
    print(f"Tabliczka mnożenia dla liczby {number}:")
    for i in range(1, 11):
        result = number * i
        print(f"{number} * {i} = {result}")

# Wejście: Liczba
number = int(input("Podaj liczbę: "))

# Wyświetlenie tabliczki mnożenia
multiplication_table(number)

# Zadanie 76 - Write a Python program to construct the following pattern, using a nested loop number.
wiersze = 5

for i in range(1, wiersze + 1):
    for j in range(1, i + 1):
        print(j, end=" ")
    print("")

# Zadanie 77 - Write a Python program to convert a month name to a number of days
def days_in_month(month):
    month_days = {
        "styczeń": 31,
        "luty": 28,  # luty w zwykłym roku
        "marzec": 31,
        "kwiecień": 30,
        "maj": 31,
        "czerwiec": 30,
        "lipiec": 31,
        "sierpień": 31,
        "wrzesień": 30,
        "październik": 31,
        "listopad": 30,
        "grudzień": 31
    }

    month_lower = month.lower()
    return month_days.get(month_lower, "Niepoprawna nazwa miesiąca")

# Wejście: Nazwa miesiąca
month_name = input("Podaj nazwę miesiąca: ")

# Obliczanie liczby dni
days = days_in_month(month_name)
print(f"Liczba dni w miesiącu {month_name}: {days}")

# Zadanie 78 - Write a Python program to check the validity of passwords input by users.
import re

def is_valid_password(password):
    # Sprawdzenie długości hasła
    if len(password) < 6 or len(password) > 16:
        return False

    # Sprawdzenie czy hasło zawiera przynajmniej jedną małą literę, jedną dużą literę i jedną cyfrę
    if not re.search("[a-z]", password) or not re.search("[A-Z]", password) or not re.search("[0-9]", password):
        return False

    # Sprawdzenie czy hasło zawiera przynajmniej jeden znak specjalny
    if not re.search("[$#@]", password):
        return False

    return True

# Wejście: Hasło od użytkownika
password = input("Podaj hasło: ")

# Sprawdzenie ważności hasła i wyświetlenie wyniku
if is_valid_password(password):
    print("Hasło jest ważne.")
else:
    print("Hasło nie spełnia wymagań.")

# Zadanie 79 - Write a Python program that accepts a string and calculates the number of digits and letters.
def count_digits_and_letters(string):
    # Inicjalizacja liczników
    num_digits = 0
    num_letters = 0

    # Iteracja po każdym znaku w ciągu
    for char in string:
        if char.isdigit():
            num_digits += 1
        elif char.isalpha():
            num_letters += 1

    return num_digits, num_letters

# Wejście: Ciąg znaków
string = input("Podaj ciąg znaków: ")

# Obliczenie liczby cyfr i liter w ciągu
digits, letters = count_digits_and_letters(string)
print("Liczba cyfr:", digits)
print("Liczba liter:", letters)

# Zadanie 80 - Write a Python program that takes two digits m (row) and n (column) as input and generates a two-dimensional array. The element value in the i-th row and j-th column of the array should be i*j.
def generate_2d_array(m, n):
    # Inicjalizacja pustej tablicy dwuwymiarowej
    array_2d = []

    # Generowanie wartości dla każdej komórki w tablicy dwuwymiarowej
    for i in range(m):
        row = []
        for j in range(n):
            row.append(i * j)
        array_2d.append(row)

    return array_2d

# Wejście: Liczba wierszy (m) i kolumn (n)
m = int(input("Podaj liczbę wierszy: "))
n = int(input("Podaj liczbę kolumn: "))

# Generowanie tablicy dwuwymiarowej
result = generate_2d_array(m, n)

# Wyświetlanie wyniku
for row in result:
    print(row)